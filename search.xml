<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java进程占用CPU过高常见的两种情况及分析定位（Linux+Windows）</title>
      <link href="2021/02/14/java/java%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8CPU%E8%BF%87%E9%AB%98%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%8A%E5%88%86%E6%9E%90%E5%AE%9A%E4%BD%8D%EF%BC%88Linux-Windows%EF%BC%89/"/>
      <url>2021/02/14/java/java%E8%BF%9B%E7%A8%8B%E5%8D%A0%E7%94%A8CPU%E8%BF%87%E9%AB%98%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%83%85%E5%86%B5%E5%8F%8A%E5%88%86%E6%9E%90%E5%AE%9A%E4%BD%8D%EF%BC%88Linux-Windows%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>转载：<a href="https://blog.csdn.net/dingjianmin/article/details/85705812?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control">https://blog.csdn.net/dingjianmin/article/details/85705812?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control</a></p><h2 id="java进程爆cpu的快速定位"><a href="#java进程爆cpu的快速定位" class="headerlink" title="java进程爆cpu的快速定位"></a>java进程爆cpu的快速定位</h2><h4 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h4><p>在程序开发的过程中，难免遇到进程占用cpu过高（现网居多、开发环境）的情况，现网出现这种情况就需要及时的能定位到问题，快速解决，否则就导致系统不可用，用户投诉等多种一系列的问题。</p><a id="more"></a><h4 id="2、java进程占用CPU过高常见的两种情况："><a href="#2、java进程占用CPU过高常见的两种情况：" class="headerlink" title="2、java进程占用CPU过高常见的两种情况："></a>2、java进程占用CPU过高常见的两种情况：</h4><ul><li>代码中有死循环或者接近死循环的操作</li><li>快速创建大量临时变量，导致频繁触发gc回收</li></ul><h4 id="3、在windows中的定位方法"><a href="#3、在windows中的定位方法" class="headerlink" title="3、在windows中的定位方法"></a>3、在windows中的定位方法</h4><p>如图所示:</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312196883-56f21812-e2bc-49ae-8e08-eb85f0f55758.png" alt="image"></p><p>用jvisualvm 和 jconsole貌似都只能看到总共占用的cpu 看不到每个线程分别占用的cpu。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197000-e4dcf8e6-ee65-4a37-ac5d-9f6bf459d3bd.png" alt="image"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312196947-88e7db7f-c19a-4faf-a454-78372f580b2b.png" alt="image"></p><p>所以在windows平台上要找出到底是哪个线程占用的cpu还不那么容易，linux用top就行了。</p><h2 id="3、定位步骤："><a href="#3、定位步骤：" class="headerlink" title="3、定位步骤："></a>3、定位步骤：</h2><h4 id="3-1、找到java进程对应的pid。"><a href="#3-1、找到java进程对应的pid。" class="headerlink" title="3.1、找到java进程对应的pid。"></a>3.1、找到java进程对应的pid。</h4><p>找pid的方法是:打开任务管理器，然后点击 “查看” 菜单，然后点击 “选择列”，把pid勾上，然后就可以在任务管理器里面看到所有进程的pid值了。</p><p>(也可以用第三步中提到的工具直接查看)，在win10详细信息里面直接可以看到pid值。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312196998-485af89e-bffd-4508-b0eb-0beb26fea9f6.png" alt="image"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/jpeg/12420408/1613312196951-c7ee2722-6de3-40f2-8fc4-a885514f86a9.jpeg" alt="image"></p><h4 id="3-2-然后把java进程导出快照。直接运行命令。"><a href="#3-2-然后把java进程导出快照。直接运行命令。" class="headerlink" title="3.2.然后把java进程导出快照。直接运行命令。"></a>3.2.然后把java进程导出快照。直接运行命令。</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197028-62998a98-636e-46ec-87a5-c6f78369bb75.png" alt="image"></p><p>找到导出的文件打开d:/jstack182880.stack文件。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312196992-5bf66bc7-482f-4442-8c81-f49679b7d7b9.png" alt="image"></p><h4 id="3-3、在windows下只能查看进程的cpu占用率，要查看线程的cpu占用率要借助其他的工具，这里用的是微软提供的-Process-Explorer-v15-3"><a href="#3-3、在windows下只能查看进程的cpu占用率，要查看线程的cpu占用率要借助其他的工具，这里用的是微软提供的-Process-Explorer-v15-3" class="headerlink" title="3.3、在windows下只能查看进程的cpu占用率，要查看线程的cpu占用率要借助其他的工具，这里用的是微软提供的 Process Explorer v15.3"></a>3.3、在windows下只能查看进程的cpu占用率，要查看线程的cpu占用率要借助其他的工具，这里用的是微软提供的 Process Explorer v15.3</h4><p>下载地址：<a href="https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer">https://docs.microsoft.com/zh-cn/sysinternals/downloads/process-explorer</a></p><p>下载完后解压运行</p><p>找到cpu占用高的线程，双击显示如图，或者右键点击需要查看的进程—properties</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312196993-42de31eb-4dd1-4461-96ca-6e0589d27956.png" alt="image"></p><h4 id="3-4-然后选择-Threads-选项卡，找到占用cpu的线程的tid，比如我这里是-224664-的线程"><a href="#3-4-然后选择-Threads-选项卡，找到占用cpu的线程的tid，比如我这里是-224664-的线程" class="headerlink" title="3.4.然后选择 Threads 选项卡，找到占用cpu的线程的tid，比如我这里是 224664 的线程"></a>3.4.然后选择 Threads 选项卡，找到占用cpu的线程的tid，比如我这里是 224664 的线程</h4><p>这里我们可以发现有多个线程占用7%左右，导致cpu占用较高</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197049-06a0178e-4e8c-4057-98d8-de5ee802759d.png" alt="image"></p><h4 id="3-5-把tid转换成16进制，我这里直接用系统自带的计算器转换，置于为什么要转换，是因为先前用jstack导出的信息里面线程对应的tid是16进制的。"><a href="#3-5-把tid转换成16进制，我这里直接用系统自带的计算器转换，置于为什么要转换，是因为先前用jstack导出的信息里面线程对应的tid是16进制的。" class="headerlink" title="3.5.把tid转换成16进制，我这里直接用系统自带的计算器转换，置于为什么要转换，是因为先前用jstack导出的信息里面线程对应的tid是16进制的。"></a>3.5.把tid转换成16进制，我这里直接用系统自带的计算器转换，置于为什么要转换，是因为先前用jstack导出的信息里面线程对应的tid是16进制的。</h4><h4 id="3-6-在-d-jstack182880-stack文件中查找-36d98"><a href="#3-6-在-d-jstack182880-stack文件中查找-36d98" class="headerlink" title="3.6.在 d:/jstack182880.stack文件中查找 36d98"></a>3.6.在 d:/jstack182880.stack文件中查找 36d98</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197052-e8c7006c-8df5-4273-bb02-4ba3b93c87a4.png" alt="image"></p><p>找到相关代码，定位出问题所在。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312196998-18ece9c7-6d69-4118-b498-0c17f77f102b.png" alt="image"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197058-1207da0e-e71c-4b5c-8c40-16f5b694fb21.png" alt="image"></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197100-2f63f172-495e-43b1-9af1-5c37690023a8.png" alt="image"></p><h2 id="4、在linux中的定位方法"><a href="#4、在linux中的定位方法" class="headerlink" title="4、在linux中的定位方法"></a>4、在linux中的定位方法</h2><h4 id="4-1-找到CPU占用高的进程号-如：使用top命令查看（可以使用其它方法，只要找到对应的进程号即可）"><a href="#4-1-找到CPU占用高的进程号-如：使用top命令查看（可以使用其它方法，只要找到对应的进程号即可）" class="headerlink" title="4.1.找到CPU占用高的进程号 如：使用top命令查看（可以使用其它方法，只要找到对应的进程号即可）"></a>4.1.找到CPU占用高的进程号 如：使用top命令查看（可以使用其它方法，只要找到对应的进程号即可）</h4><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197055-ca646045-5a32-49eb-9ff1-69bbc6df1cf3.png" alt="image"></p><p>注：图中第一列PID为进程号；</p><h4 id="4-2、根据进程号找到CPU占用高的线程"><a href="#4-2、根据进程号找到CPU占用高的线程" class="headerlink" title="4.2、根据进程号找到CPU占用高的线程"></a>4.2、根据进程号找到CPU占用高的线程</h4><p>如：使用命令top -H -p (其中要换成第一步找到的进程号)</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197008-c59b8394-b360-4d1f-9ba5-c552b255fd2f.png" alt="image"></p><p>注：图中第一列PID此时为线程号；</p><h4 id="4-3-导出java进程执行堆栈，并找到对应的线程"><a href="#4-3-导出java进程执行堆栈，并找到对应的线程" class="headerlink" title="4.3.导出java进程执行堆栈，并找到对应的线程"></a>4.3.导出java进程执行堆栈，并找到对应的线程</h4><p>使用jstack &gt; jstack_xxx.txt (其中要换成第一步找到的进程号)</p><p>从第二步中的PID中找出一个CPU占用高的线程号，把它转成16进制，比如3261转成CBD</p><p>从导出的堆栈信息里找到nid为cbd的线程堆栈</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197028-772aba8c-9b74-4832-93f0-09c9275a012a.png" alt="image"></p><h4 id="4-4：从堆栈里找到对应的代码执行类和方法"><a href="#4-4：从堆栈里找到对应的代码执行类和方法" class="headerlink" title="4.4：从堆栈里找到对应的代码执行类和方法"></a>4.4：从堆栈里找到对应的代码执行类和方法</h4><p>若代码为业务代码，则需要具体分析代码，找出代码中死循环或接近死循环的地方，并修正；定位结束；</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197044-a81d7e50-dbb7-435e-afd3-225f8dd13be1.png" alt="image"></p><p>若堆栈信息为gc线程（类似下图），则需要进行下一步</p><h4 id="4-5：dump出java进程的堆对象使用情况"><a href="#4-5：dump出java进程的堆对象使用情况" class="headerlink" title="4.5：dump出java进程的堆对象使用情况"></a>4.5：dump出java进程的堆对象使用情况</h4><p>使用jmap -histo &gt; jmap_xxx.txt</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613312197110-de639ac8-9eda-494e-8739-1ceec0a33210.png" alt="image"></p><p>找出量比较大的、且跟业务有关的对象，找到这些对象创建的地方进行分析；一般需要持续创建大量的对象，使得内存不够用时，才会频繁触发gc进行回收，gc回收时jvm有停顿，CPU也占用很高。</p><p>线程之间的切换，是很耗费性能的，所以带来CPU飙升.</p><p>新生代设置过小，也会频繁触发gc。有大对象始终根节点路径可达，无法释放,jvm在疯狂的Full GC。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot整合netty串口</title>
      <link href="2021/02/14/Springboot/Springboot%E6%95%B4%E5%90%88netty%E4%B8%B2%E5%8F%A3/"/>
      <url>2021/02/14/Springboot/Springboot%E6%95%B4%E5%90%88netty%E4%B8%B2%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>SpringNettyApplication.java</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> me.server.RxServer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.CommandLineRunner;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringNettyApplication</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RxServer rxServer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringNettyApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        ChannelFuture future = rxServer.run();</span><br><span class="line">        Runtime.getRuntime().addShutdownHook(<span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                rxServer.destroy();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        future.channel().closeFuture().syncUninterruptibly();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>server/RxServer.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> me.server;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFactory;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.oio.OioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.rxtx.RxtxChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.rxtx.RxtxChannelConfig;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.rxtx.RxtxDeviceAddress;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> lombok.<span class="keyword">var</span>;</span><br><span class="line"><span class="keyword">import</span> me.handler.RxtxClientHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> OioEventLoopGroup group = <span class="keyword">new</span> OioEventLoopGroup();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RxtxChannel channel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ChannelFuture <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ChannelFuture future = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">var</span> bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bootstrap.group(group).channelFactory(<span class="keyword">new</span> ChannelFactory&lt;RxtxChannel&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> RxtxChannel <span class="title">newChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> channel;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">                    .handler(<span class="keyword">new</span> ChannelInitializer&lt;RxtxChannel&gt;() &#123;</span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(RxtxChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                            ch.pipeline().addLast(</span><br><span class="line">    <span class="comment">//                                new LineBasedFrameDecoder(32768),</span></span><br><span class="line">    <span class="comment">//                                new StringEncoder(),</span></span><br><span class="line">    <span class="comment">//                                new StringDecoder(),</span></span><br><span class="line">                                    <span class="keyword">new</span> RxtxClientHandler()</span><br><span class="line">                            );</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            channel = <span class="keyword">new</span> RxtxChannel();</span><br><span class="line">            channel.config().setBaudrate(<span class="number">9600</span>)</span><br><span class="line">                    .setDatabits(RxtxChannelConfig.Databits.DATABITS_8)</span><br><span class="line">                    .setParitybit(RxtxChannelConfig.Paritybit.NONE)</span><br><span class="line">                    .setStopbits(RxtxChannelConfig.Stopbits.STOPBITS_1);</span><br><span class="line">            future = bootstrap.connect(<span class="keyword">new</span> RxtxDeviceAddress(<span class="string">&quot;COM8&quot;</span>)).sync();</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;Shutdown Netty rx...&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(channel != <span class="keyword">null</span>) &#123; channel.close();&#125;</span><br><span class="line">        group.shutdownGracefully();</span><br><span class="line">        log.info(<span class="string">&quot;Shutdown Netty rx Success!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>handler/RxtxClientHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2013 The Netty Project</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The Netty Project licenses this file to you under the Apache License,</span></span><br><span class="line"><span class="comment"> * version 2.0 (the &quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment"> * with the License. You may obtain a copy of the License at:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT</span></span><br><span class="line"><span class="comment"> * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the</span></span><br><span class="line"><span class="comment"> * License for the specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment"> * under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">package</span> me.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxtxClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[o.readableBytes()];</span><br><span class="line">        <span class="comment">// 从里面读取数据，这里面的数据是16进制的，0x..</span></span><br><span class="line">        o.readBytes(req);</span><br><span class="line"></span><br><span class="line">        log.info(req.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//         将hex解码成String</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(req));</span></span><br><span class="line"><span class="comment">//        // 十六进制转换字符串，没有解码</span></span><br><span class="line"><span class="comment">//        String str = HexUtil.encodeHexStr(req);</span></span><br><span class="line"><span class="comment">//        System.out.println(str);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GitHub地址：<a href="https://github.com/zzzzzzzs/SpringbootIntegration">https://github.com/zzzzzzzs/SpringbootIntegration</a></p>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串口 </tag>
            
            <tag> netty </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot打包jar中没有主清单属性</title>
      <link href="2021/02/14/Springboot/Springboot%E6%89%93%E5%8C%85jar%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7/"/>
      <url>2021/02/14/Springboot/Springboot%E6%89%93%E5%8C%85jar%E4%B8%AD%E6%B2%A1%E6%9C%89%E4%B8%BB%E6%B8%85%E5%8D%95%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>如果出现Spring Boot打包jar中没有主清单属性</p><p>​        <img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613308093845-e6e81f44-3e77-4c67-8a30-b10f786884ab.png" alt="1.png">                                    </p><p>官方是这样描述的</p><p><a href="https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/html/getting-started.html#getting-started">https://docs.spring.io/spring-boot/docs/2.3.4.RELEASE/reference/html/getting-started.html#getting-started</a></p><a id="more"></a><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  The spring-boot-starter-parent POM includes &lt;executions&gt; <span class="keyword">configuration</span> <span class="keyword">to</span> bind the repackage goal. </span><br><span class="line"><span class="keyword">If</span> you <span class="keyword">do</span> <span class="keyword">not</span> use the parent POM, you need <span class="keyword">to</span> <span class="keyword">declare</span> this <span class="keyword">configuration</span> yourself. </span><br><span class="line">See the plugin documentation <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2021/png/12420408/1613229859792-d9271721-76b0-405a-91ef-bf640332232f.png" alt="image.png"></p><p>大概意思就是说：引入<code>org.springframework.boot</code>父级如果不引入父级您需要自己声明配置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Inherit defaults from Spring Boot --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  最好加入这个，否则打包容易出问题  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然插件也是需要的</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这些官方文档里面也有。</p>]]></content>
      
      
      <categories>
          
          <category> Springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty-串口接收</title>
      <link href="2021/02/13/netty/netty-%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6/"/>
      <url>2021/02/13/netty/netty-%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="netty串口接收"><a href="#netty串口接收" class="headerlink" title="netty串口接收"></a>netty串口接收</h1><p>netty串口，在Windows上使用。 目前只有接收数据。</p><a id="more"></a><p>RxtxClient.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.me.netty.rxtx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.bootstrap.Bootstrap;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelFuture;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelInitializer;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.oio.OioEventLoopGroup;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.rxtx.RxtxChannel;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.rxtx.RxtxChannelConfig;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.rxtx.RxtxDeviceAddress;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.*;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxtxClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> OioEventLoopGroup group = <span class="keyword">new</span> OioEventLoopGroup();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> RxtxChannel channel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildRxtxClient</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Bootstrap bootstrap = <span class="keyword">new</span> Bootstrap();</span><br><span class="line">        bootstrap.group(group).channelFactory(<span class="keyword">new</span> ChannelFactory&lt;RxtxChannel&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> RxtxChannel <span class="title">newChannel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> channel;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">                .handler(<span class="keyword">new</span> ChannelInitializer&lt;RxtxChannel&gt;() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(RxtxChannel ch)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        ch.pipeline().addLast(</span><br><span class="line"><span class="comment">//                                new LineBasedFrameDecoder(32768),</span></span><br><span class="line"><span class="comment">//                                new StringEncoder(),</span></span><br><span class="line"><span class="comment">//                                new StringDecoder(),</span></span><br><span class="line">                                <span class="comment">// 处理事件</span></span><br><span class="line">                                <span class="keyword">new</span> RxtxClientHandler()</span><br><span class="line">                        );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        channel = <span class="keyword">new</span> RxtxChannel();</span><br><span class="line">        channel.config().setBaudrate(<span class="number">9600</span>)</span><br><span class="line">                .setDatabits(RxtxChannelConfig.Databits.DATABITS_8)</span><br><span class="line">                .setParitybit(RxtxChannelConfig.Paritybit.NONE)</span><br><span class="line">                .setStopbits(RxtxChannelConfig.Stopbits.STOPBITS_1);</span><br><span class="line">        ChannelFuture  future = bootstrap.connect(<span class="keyword">new</span> RxtxDeviceAddress(<span class="string">&quot;COM3&quot;</span>)).sync();</span><br><span class="line">        future.channel().closeFuture().sync();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            buildRxtxClient();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            group.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RxtxClientHandler.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.me.netty.rxtx;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.netty.buffer.ByteBuf;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.ChannelHandlerContext;</span><br><span class="line"><span class="keyword">import</span> io.netty.channel.SimpleChannelInboundHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RxtxClientHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">ByteBuf</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext ctx, ByteBuf o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] req = <span class="keyword">new</span> <span class="keyword">byte</span>[o.readableBytes()];</span><br><span class="line">        <span class="comment">// 从里面读取数据，这里面的数据是16进制的，0x..</span></span><br><span class="line">        o.readBytes(req);</span><br><span class="line"><span class="comment">//         将hex解码成String</span></span><br><span class="line"><span class="comment">//        System.out.println(new String(req));</span></span><br><span class="line"><span class="comment">//        // 十六进制转换字符串，没有解码</span></span><br><span class="line"><span class="comment">//        String str = HexUtil.encodeHexStr(req);</span></span><br><span class="line"><span class="comment">//        System.out.println(str);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>GitHub: <a href="https://github.com/zzzzzzzs/netty-rxtx">https://github.com/zzzzzzzs/netty-rxtx</a></p>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 串口 </tag>
            
            <tag> netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Search is art</title>
      <link href="2021/02/11/about/"/>
      <url>2021/02/11/about/</url>
      
        <content type="html"><![CDATA[<p>学会使用搜索将会为您减少时间。</p>]]></content>
      
      
      <categories>
          
          <category> search </category>
          
      </categories>
      
      
        <tags>
            
            <tag> search </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
