import{_ as a,V as e,W as n,X as i}from"./framework-d65a3be7.js";const d={},s=i(`<h2 id="前置条件" tabindex="-1"><a class="header-anchor" href="#前置条件" aria-hidden="true">#</a> 前置条件</h2><p>在搭建 zlink 开发环境之前请确保你已经安装如下软件</p><ul><li>Git:版本控制软件</li><li>JDK：后端开发</li><li>Maven：Java包管理</li><li>Node:前端开发;</li></ul><h3 id="环境要求" tabindex="-1"><a class="header-anchor" href="#环境要求" aria-hidden="true">#</a> 环境要求</h3><table><thead><tr><th>环境</th><th>版本</th></tr></thead><tbody><tr><td>npm</td><td>6.14.17</td></tr><tr><td>node.js</td><td>14.21.2</td></tr><tr><td>jdk</td><td>11</td></tr><tr><td>maven</td><td>3.6.0+</td></tr><tr><td>lombok</td><td>IDEA插件安装</td></tr><tr><td>mysql</td><td>8.0+</td></tr></tbody></table><h3 id="克隆代码" tabindex="-1"><a class="header-anchor" href="#克隆代码" aria-hidden="true">#</a> 克隆代码</h3><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone https://github.com/zzzzzzzs/zlink.git
</code></pre></div><h2 id="intellij-idea" tabindex="-1"><a class="header-anchor" href="#intellij-idea" aria-hidden="true">#</a> IntelliJ IDEA</h2><p>IntelliJ IDEA 来进行 zlink 前后端开发。Eclipse 为测试过。</p><h3 id="安装-lombok-插件" tabindex="-1"><a class="header-anchor" href="#安装-lombok-插件" aria-hidden="true">#</a> 安装 Lombok 插件</h3><p>IDEA 提供了插件设置来安装 Lombok 插件。如果尚未安装，请在导入 zlink 之前按照以下说明来进行操作以启用对 Lombok 注解的支持：</p><ol><li>转到 IDEA Settings → Plugins 并选择 Marketplace 。</li><li>选择并安装 Lombok 插件。</li><li>如果出现提示，请重启 IDEA 。</li></ol><h3 id="导入-zlink" tabindex="-1"><a class="header-anchor" href="#导入-zlink" aria-hidden="true">#</a> 导入 zlink</h3><ol><li>启动 IDEA 并选择 Open。</li><li>选择已克隆的 zlink 存储库的根文件夹。</li><li>等待项目加载完成。</li><li>设置 JDK 11 和 Maven 3.6.0</li></ol><h2 id="前端环境" tabindex="-1"><a class="header-anchor" href="#前端环境" aria-hidden="true">#</a> 前端环境</h2><h3 id="安装-node-js" tabindex="-1"><a class="header-anchor" href="#安装-node-js" aria-hidden="true">#</a> 安装 node.js</h3><p>可用版本 14.21.2 +，安装步骤详情百度。</p><h3 id="安装-npm" tabindex="-1"><a class="header-anchor" href="#安装-npm" aria-hidden="true">#</a> 安装 npm</h3><p>因 node.js 安装后 npm 版本较高，因此需要可用版本 6.14.17，升级npm命令如下：</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> npm@6.14.17 <span class="token parameter variable">-g</span>
</code></pre></div><h3 id="初始化前端依赖" tabindex="-1"><a class="header-anchor" href="#初始化前端依赖" aria-hidden="true">#</a> 初始化前端依赖</h3><p>进入 <code>zlink\\zlink-web</code> 目录下执行</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
</code></pre></div><p>运行 web 项目</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> run serve
</code></pre></div><h2 id="初始化数据库" tabindex="-1"><a class="header-anchor" href="#初始化数据库" aria-hidden="true">#</a> 初始化数据库</h2><p>首先创建 <code>zlink </code> 数据库</p><div class="language-sql" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token identifier"><span class="token punctuation">\`</span>zlink<span class="token punctuation">\`</span></span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token string">&#39;utf8mb4&#39;</span> <span class="token keyword">COLLATE</span> <span class="token string">&#39;utf8mb4_general_ci&#39;</span>
</code></pre></div><p>然后在数据库中执行 <code>zlink/zlink-doc/db/zlink.sql</code> 文件中的内容</p><h2 id="打包" tabindex="-1"><a class="header-anchor" href="#打包" aria-hidden="true">#</a> 打包</h2><p>首先在 <code>zlink/zlink-web</code> 目录下执行</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>
<span class="token function">npm</span> run build
</code></pre></div><p>生成 <code>dist</code> 文件，然后打包后端项目，会直接将生成 <code>dist</code> 目录下的文件拷贝到 <code>zlink/zlink-admin/src/main/resources/static</code> 目录下</p><div class="language-bash" data-ext="sh"><pre class="language-bash"><code>mvn clean <span class="token function">install</span> <span class="token parameter variable">-Dmaven.test.skip</span><span class="token operator">=</span>true
</code></pre></div><p>然后使用 <code>zlink.sh</code> 脚本启动，访问 <code>http://ip:5465</code> 访问就可以了</p><h2 id="源码结构" tabindex="-1"><a class="header-anchor" href="#源码结构" aria-hidden="true">#</a> 源码结构</h2><h3 id="zlink-admin" tabindex="-1"><a class="header-anchor" href="#zlink-admin" aria-hidden="true">#</a> zlink-admin</h3><p>zlink 的管理中心，标准的 SpringBoot 应用，负责与前端交互。</p><h3 id="zlink-alert" tabindex="-1"><a class="header-anchor" href="#zlink-alert" aria-hidden="true">#</a> zlink-alert</h3><p>zlink 的告警中心，支持钉钉 、企业微信 、飞书 、邮箱。</p><h3 id="zlink-cdc" tabindex="-1"><a class="header-anchor" href="#zlink-cdc" aria-hidden="true">#</a> zlink-cdc</h3><p>zlink 的 cdc 部分，主要是用来生成 cdc sql。</p><h3 id="zlink-common" tabindex="-1"><a class="header-anchor" href="#zlink-common" aria-hidden="true">#</a> zlink-common</h3><p>zlink 的子项目的公用类及实现项目。</p><h3 id="zlink-doc" tabindex="-1"><a class="header-anchor" href="#zlink-doc" aria-hidden="true">#</a> zlink-doc</h3><p>zlink 文档部分</p><h3 id="zlink-flink" tabindex="-1"><a class="header-anchor" href="#zlink-flink" aria-hidden="true">#</a> zlink-flink</h3><p>zlink 的 flinksql 部分</p><h3 id="zlink-metadata" tabindex="-1"><a class="header-anchor" href="#zlink-metadata" aria-hidden="true">#</a> zlink-metadata</h3><p>zlink 元数据中心部分，支持 SPI 方式</p><h3 id="zlink-web" tabindex="-1"><a class="header-anchor" href="#zlink-web" aria-hidden="true">#</a> zlink-web</h3><p>zlink 前端项目</p><h3 id="assembly" tabindex="-1"><a class="header-anchor" href="#assembly" aria-hidden="true">#</a> assembly</h3><p>项目打包配置，生产最终的 tar.gz</p>`,54),l=[s];function t(r,c){return e(),n("div",null,l)}const o=a(d,[["render",t],["__file","dev-guide.html.vue"]]);export{o as default};
